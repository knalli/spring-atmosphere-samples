<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets
		and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:META-INF/spring/root-context.xml</param-value>
	</context-param>

	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.atmosphere.cpr.MeteorServlet</servlet-class>

		<!--
			http://blog.nerdability.com/2013/01/a-rough-guide-to-atmosphere-with-spring.html
			The recoverFromDestroyedBroadcaster prevents an exception being thrown when you
			try to reuse a broadcaster that you have recently destroyed ( useful if you
			want your client to subscribe using its own personal channel ).
		-->
		<init-param>
			<param-name>org.atmosphere.cpr.recoverFromDestroyedBroadcaster</param-name>
			<param-value>true</param-value>
		</init-param>

		<!-- Because of many broadcasters, threads should be shared.-->
		<init-param>
			<param-name>org.atmosphere.cpr.broadcaster.shareableThreadPool</param-name>
			<param-value>true</param-value>
		</init-param>

		<init-param>
			<param-name>org.atmosphere.servlet</param-name>
			<param-value>org.springframework.web.servlet.DispatcherServlet</param-value>
		</init-param>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:META-INF/spring/mvc/servlet-context.xml</param-value>
		</init-param>

		<!--
			IMPORTANT: Because Atmosphere wraps the actual Spring Servlet, the following
			both configuration properties ensure that the security filter will be
			processed within Atmosphere.
		-->
		<init-param>
			<param-name>org.atmosphere.filter</param-name>
			<param-value>org.springframework.web.filter.DelegatingFilterProxy</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.filter.name</param-name>
			<param-value>springSecurityFilterChain</param-value>
		</init-param>

		<!-- Disable Atmosphere Session Support (conflicts with Spring Security) -->
		<init-param>
			<param-name>org.atmosphere.cpr.sessionSupport</param-name>
			<param-value>false</param-value>
		</init-param>

		<!-- Disable Websockets (i.e. Loadbalancer issues) -->
		<init-param>
			<param-name>org.atmosphere.useWebSocket</param-name>
			<param-value>false</param-value>
		</init-param>

		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- The Spring Security Filter handles and ensures the Spring Security Context for all requests. -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

</web-app>
